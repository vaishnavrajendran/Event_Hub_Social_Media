import { useState } from "react";
import {
  Box,
  Button,
  TextField,
  useMediaQuery,
  Typography,
  useTheme,
} from "@mui/material";
import EditOutlinedIcon from "@mui/icons-material/EditOutlined";
import { Formik } from "formik";
import * as yup from "yup";
import { useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { setLogin } from "state";
import Dropzone from "react-dropzone";
import FlexBetween from "components/FlexBetween";
import { storage } from "firebaseConfig";

import { authentication } from "firebaseConfig";
import { RecaptchaVerifier, signInWithPhoneNumber } from "firebase/auth";


const passwordRules = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/;

const registerSchema = yup.object().shape({
  firstName: yup.string().min(5).required("required"),
  lastName: yup.string().min(5).required("required"),
  email: yup.string().min(5).email("invalid email").required("required"),
  password: yup.string().matches(passwordRules,{message:"Password should contain lowercase,uppercase and a number"}).required("required"),
  confirm_password: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match'),
  location: yup.string().required("required"),
  occupation: yup.string().required("required"),
  picture: yup.string().required("required"),
});

const loginSchema = yup.object().shape({
  email: yup.string().email("invalid email").required("required"),
  password: yup.string().required("required"),
});

const initialValuesRegister = {
  firstName: "",
  lastName: "",
  email: "",
  password: "",
  confirm_password: "",
  location: "",
  occupation: "",
  picture: "",
  mobile: "",
  otp: ""
};

const initialValuesLogin = {
  email: "",
  password: "",
};

const Form = () => {
  const [pageType, setPageType] = useState("login");
  const { palette } = useTheme();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const isNonMobile = useMediaQuery("(min-width:600px)");
  const isLogin = pageType === "login";
  const isRegister = pageType === "register";
  const [OTPSuccesfull, setSuccess] = useState(true)

let mob;
let OTP;
let proPicUrl;

  {/* OTP CODE */}
  const generateRecaptcha = () => {
    window.recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {
      'size': 'invisible',
      'callback': (response) => {
        // reCAPTCHA solved, allow signInWithPhoneNumber.
      }
    }, authentication);
  }

const OTPSetting = (val) => {
  OTP = val;
}

  const verifyOTP = () => {
    let otp = OTP;
    console.log('enterd')
    if(otp.length === 6){
      console.log('verifyOTP');
      let confirmationResult = window.confirmationResult;
      confirmationResult.confirm(otp).then((result) => {
        // User signed in successfully
        setSuccess(false)
        const user = result.user;
      }).catch((error) => {
        // User couldn't sign in (bad verification code?)
        // ...
        console.log("User couldn't sign in",error.message);
      });
    }
  }

  const requestOtp = () => {
    generateRecaptcha();
    let appVerifier = window.recaptchaVerifier;
    signInWithPhoneNumber(authentication,mob,appVerifier)
    .then(confirmationResult => {
      window.confirmationResult = confirmationResult;
    }).catch((error) => {
      console.log(error);
    })
  }
  {/* OTP CODE */}

  const register = async (values, onSubmitProps) => {
    const formData = new FormData();
    (() => {
      for(let value in values){
        if(value === 'picture'){
          storage.ref('/images/'+values[value].name).put(values[value])
      .on("state_changed",alert('success'),alert, () => {
        storage.ref('images').child(values[value].name).getDownloadURL()
        .then((url) => {
          proPicUrl = url.toString();
          formData.append("picture", proPicUrl);
          if(formData.append("picture", proPicUrl)){
            console.log('dataGot')
          }
          console.log('formData',formData)
        }).catch((error) => {
          console.log(error.message)
        })
      });
        } else {
          console.log(value)
          formData.append(value, values[value]);
        }
      }
    })()
    // this allows us to send form info with image

    // for (let value in values) {
    //   if(value !== 'picture'){
    //     console.log(value)
    //     formData.append(value, values[value]);
    //   }
      // 

        // if(value ==='picture')
        // formData.append("picturePath", proPicUrl);
        // console.log(proPicUrl,'pro')
        // formData.append("picturePath", url);

    // }
    // (() => {
    //   console.log('append',url);
    //   formData.append("picturePath", url);
    // })()
    

    
    const savedUserResponse = await fetch(
      "http://localhost:3001/auth/register",
      {
        method: "POST",
        body: formData,
      }
    ).then((resolve)=>{
      console.log(resolve)
    }).catch((err)=> {
      console.log(err.message)
    })
    const savedUser = await savedUserResponse.json();
    onSubmitProps.resetForm();

    if (savedUser) {
      setPageType("login");
    }
  };

  const login = async (values, onSubmitProps) => {
    const loggedInResponse = await fetch("http://localhost:3001/auth/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(values),
    }
    
    );
    const loggedIn = await loggedInResponse.json();
    onSubmitProps.resetForm();
    if (loggedIn) {
      dispatch(
        setLogin({
          user: loggedIn.user,
          token: loggedIn.token,
        })
      );
      navigate("/home");
    }
  };

  const handleFormSubmit = async (values, onSubmitProps) => {
    if (isLogin) await login(values, onSubmitProps);
    if (isRegister) await register(values, onSubmitProps);
  };

  const mobileSetting = (val) => {
    mob = val;
    console.log('state',mob);
  }


  return (
    <Formik
      onSubmit={handleFormSubmit}
      initialValues={isLogin ? initialValuesLogin : initialValuesRegister}
      validationSchema={isLogin ? loginSchema : registerSchema}
    >
      {({
        values,
        errors,
        touched,
        handleBlur,
        handleChange,
        handleSubmit,
        setFieldValue,
        resetForm,
      }) => (
        <form onSubmit={handleSubmit}>
          <Box
            display="grid"
            gap="30px"
            gridTemplateColumns="repeat(4, minmax(0, 1fr))"
            sx={{
              "& > div": { gridColumn: isNonMobile ? undefined : "span 4" },
            }}
          >
            {isRegister && (
              <>
                <TextField
                  label="First Name"
                  onBlur={handleBlur}
                  onChange={handleChange}
                  value={values.firstName}
                  name="firstName"
                  error={
                    Boolean(touched.firstName) && Boolean(errors.firstName)
                  }
                  helperText={touched.firstName && errors.firstName}
                  sx={{ gridColumn: "span 2" }}
                />
                <TextField
                  label="Last Name"
                  onBlur={handleBlur}
                  onChange={handleChange}
                  value={values.lastName}
                  name="lastName"
                  error={Boolean(touched.lastName) && Boolean(errors.lastName)}
                  helperText={touched.lastName && errors.lastName}
                  sx={{ gridColumn: "span 2" }}
                />
                <TextField
                  label="Location"
                  onBlur={handleBlur}
                  onChange={handleChange}
                  value={values.location}
                  name="location"
                  error={Boolean(touched.location) && Boolean(errors.location)}
                  helperText={touched.location && errors.location}
                  sx={{ gridColumn: "span 4" }}
                />
                <TextField
                  label="Occupation"
                  onBlur={handleBlur}
                  onChange={handleChange}
                  value={values.occupation}
                  name="occupation"
                  error={
                    Boolean(touched.occupation) && Boolean(errors.occupation)
                  }
                  helperText={touched.occupation && errors.occupation}
                  sx={{ gridColumn: "span 4" }}
                />
                <Box
                  gridColumn="span 4"
                  border={`1px solid ${palette.neutral.medium}`}
                  borderRadius="5px"
                  p="1rem"
                >
                  <Dropzone
                    acceptedFiles=".jpg,.jpeg,.png"
                    multiple={false}
                    onDrop={(acceptedFiles) =>
                      setFieldValue("picture", acceptedFiles[0])
                    }
                  >
                    {({ getRootProps, getInputProps }) => (
                      <Box
                        {...getRootProps()}
                        border={`2px dashed ${palette.primary.main}`}
                        p="1rem"
                        sx={{ "&:hover": { cursor: "pointer" } }}
                      >
                        <input {...getInputProps()} />
                        {!values.picture ? (
                          <p>Add Picture Here</p>
                        ) : (
                          <FlexBetween>
                            <Typography>{values.picture.name}</Typography>
                            <EditOutlinedIcon />
                          </FlexBetween>
                        )}
                      </Box>
                    )}
                  </Dropzone>
                </Box>
                           {/* Mobile */}
            <TextField
                  type="text"
                  label="Mobile"
                  onBlur={handleBlur}
                  onChange={handleChange}
                  value={values.mobile}
                  name="mobile"
                  error={Boolean(touched.mobile) && Boolean(errors.mobile)}
                  helperText={touched.lastName && errors.lastName}
                  sx={{ gridColumn: "span 2" }}
                />
                <Button
                sx={{
                  backgroundColor: palette.primary.main,
                  color: palette.background.alt,
                  "&:hover": { color: palette.primary.main },
                }}
                type="button"
                onClick={() => {
                  mobileSetting(values.mobile)
                  requestOtp()
                }}
                >Send OTP</Button>
                <TextField
                  label="OTP"
                  onBlur={handleBlur}
                  value={values.OTP}
                  onChange={handleChange}
                  name="OTP"
                  error={Boolean(touched.OTP) && Boolean(errors.OTP)}
                  helperText={touched.OTP && errors.OTP}
                  sx={{ gridColumn: "span 2" }}
                />
                <Button
                sx={{
                backgroundColor: palette.primary.main,
                color: palette.background.alt,
                "&:hover": { color: palette.primary.main },
                }}
                type="button"
                onClick={() => {
                  OTPSetting(values.OTP)
                  verifyOTP()
                }}
                >Verify
                </Button>
              </>
            )}

            <TextField
              label="Email"
              onBlur={handleBlur}
              onChange={handleChange}
              value={values.email}
              name="email"
              error={Boolean(touched.email) && Boolean(errors.email)}
              helperText={touched.email && errors.email}
              sx={{ gridColumn: "span 4" }}
            />
            <TextField
              label="Password"
              type="password"
              onBlur={handleBlur}
              onChange={handleChange}
              value={values.password}
              name="password"
              error={Boolean(touched.password) && Boolean(errors.password)}
              helperText={touched.password && errors.password}
              sx={{ gridColumn: "span 4" }}
            />
        {isRegister && (
          <>
              <TextField
              label="Confirm Password"
              type="password"
              onBlur={handleBlur}
              onChange={handleChange}
              value={values.confirm_password}
              name="confirm_password"
              error={Boolean(touched.confirm_password) && Boolean(errors.confirm_password)}
              helperText={touched.confirm_password && errors.confirm_password}
              sx={{ gridColumn: "span 4" }}
            />
          </>
        )}
          </Box>

          {/* BUTTONS */}
          <Box>
            <Button
              id="register"
              fullWidth
              type="submit"
              sx={{
                m: "2rem 0",
                p: "1rem",
                backgroundColor: palette.primary.main,
                color: palette.background.alt,
                "&:hover": { color: palette.primary.main },
              }}
              // disabled={!isLogin?OTPSuccesfull:false}
            >
              {isLogin ? "LOGIN" : "REGISTER"}
            </Button>
            <Typography
              onClick={() => {
                setPageType(isLogin ? "register" : "login");
                resetForm();
              }}
              sx={{
                textDecoration: "underline",
                color: palette.primary.main,
                "&:hover": {
                  cursor: "pointer",
                  color: palette.primary.light,
                },
              }}
            >
              {isLogin
                ? "Don't have an account? Sign Up here."
                : "Already have an account? Login here."}
            </Typography>
          </Box>
          <div id='recaptcha-container'></div>
        </form>
      )}
    </Formik>
  );
};

export default Form;





{/* {comments.map((comment, i) => (
            <Box key={`${name}-${i}`}>
              <Typography sx={{ color: main, m: "0.5rem 0", pl: "1rem" }}>
                {comment}
              </Typography>
            </Box>
          ))} */}

+